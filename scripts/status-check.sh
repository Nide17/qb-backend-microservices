#!/bin/bash

# QB Microservices Status Monitor
# Comprehensive status checking for all services and databases

set -e

echo "üè• QB Microservices Health Monitor"
echo "=================================="
echo ""

# Function to check service health
check_service_health() {
    local port=$1
    local name=$2
    
    if curl -s --max-time 3 "http://localhost:$port/health" > /dev/null 2>&1; then
        echo "‚úÖ $name Service (port $port): Healthy"
    elif curl -s --max-time 3 "http://localhost:$port" > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  $name Service (port $port): Running but no /health endpoint"
    else
        echo "‚ùå $name Service (port $port): Not responding"
    fi
}

# Check API Gateway first (it provides comprehensive health data)
echo "üö™ API Gateway Health Report:"
echo "----------------------------"
if curl -s --max-time 5 "http://localhost:5000/api/health" > /tmp/health_report.json 2>&1; then
    echo "‚úÖ API Gateway is running and providing health data"
    
    # Extract overall status
    overall_status=$(cat /tmp/health_report.json | grep -o '"status":"[^"]*' | cut -d'"' -f4)
    echo "üìä Overall System Status: $overall_status"
    
    echo ""
    echo "üîó Individual Service Status from API Gateway:"
    
    # Check if jq is available for better JSON parsing
    if command -v jq >/dev/null 2>&1; then
        cat /tmp/health_report.json | jq -r '.services[] | "‚Ä¢ \(.service): \(.status) (\(.responseTime)ms)"'
    else
        echo "  (Install 'jq' for detailed service breakdown)"
        echo "  Raw health data available at: http://localhost:5000/api/health"
    fi
    
    echo ""
    echo "üóÑÔ∏è  Database Status:"
    if command -v jq >/dev/null 2>&1; then
        redis_connected=$(cat /tmp/health_report.json | jq -r '.cache.redis.connected')
        echo "‚Ä¢ Redis: $([ "$redis_connected" = "true" ] && echo "‚úÖ Connected" || echo "‚ùå Disconnected")"
    fi
    
    rm -f /tmp/health_report.json
else
    echo "‚ùå API Gateway not responding"
fi

echo ""
echo "üê≥ Docker Container Status:"
echo "----------------------------"
docker compose ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null | grep -E "(NAME|qb-)" || echo "No containers running"

echo ""
echo "üîå Direct Port Checks:"
echo "----------------------"

# Check databases
echo "üìä Databases:"
echo "‚Ä¢ MongoDB (27018): $(nc -z localhost 27018 && echo "‚úÖ Active" || echo "‚ùå Inactive")"
echo "‚Ä¢ Redis (6379): $(nc -z localhost 6379 && echo "‚úÖ Active" || echo "‚ùå Inactive")"

echo ""
echo "üéØ Microservices:"

# Check all services
check_service_health 5000 "API Gateway"
check_service_health 5001 "Users"
check_service_health 5002 "Quizzing"
check_service_health 5003 "Posts"
check_service_health 5004 "Schools"
check_service_health 5005 "Courses"
check_service_health 5006 "Scores"
check_service_health 5007 "Downloads"
check_service_health 5008 "Contacts"
check_service_health 5009 "Feedbacks"
check_service_health 5010 "Comments"
check_service_health 5011 "Statistics"

echo ""
echo "üìã Quick Commands:"
echo "==================="
echo "‚Ä¢ Full health report: curl http://localhost:5000/api/health | jq"
echo "‚Ä¢ View service logs: docker compose logs -f [service-name]"
echo "‚Ä¢ Restart service: docker compose restart [service-name]"
echo "‚Ä¢ Stop all: docker compose down"
echo "‚Ä¢ Start all: docker compose up -d"
echo ""
echo "üîó Service URLs:"
echo "‚Ä¢ API Gateway: http://localhost:5000"
echo "‚Ä¢ Health Dashboard: http://localhost:5000/api/health"
echo "‚Ä¢ Individual services: http://localhost:500[1-11]"
echo ""
echo "üìä For real-time monitoring, run: watch -n 5 '$0'"
